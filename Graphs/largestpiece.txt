// It's Gary's birthday today and he has ordered his favourite square cake consisting of '0's and '1's . But Gary wants the biggest piece of '1's and no '0's . A piece of cake is defined as a part which consist of only '1's, and all '1's share an edge with each other on the cake. Given the size of cake N and the cake, can you find the count of '1's in the biggest piece of '1's for Gary ?
Input Format :
The first line of input contains an integer, that denotes the value of N. 
Each of the following N lines contain N space separated integers.
Output Format :
Print the count of '1's in the biggest piece of '1's, according to the description in the task.
Constraints :
1 <= N <= 1000
Time Limit: 1 sec
Sample Input 1:
2
1 1
0 1
Sample Output 1:
3



#include<queue>
#include<utility>

int getBiggestPieceSize(vector<vector<int>> &cake, int n) {
   
    int vis[n][n];
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            vis[i][j]=0;
        }
    }
    
    
        pair<int,int> t;  int x,y;  int max=0; int count;
    
    
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
             
            
            if(vis[i][j]==0 && cake[i][j]==1)
            {
                queue<pair<int,int>> q;
                
                vis[i][j]=1;
                q.push({i,j});
                
                count=1;
           
            
    
         
    while(!q.empty())
    {
        
        t=q.front();
        
        x= t.first;
        
        y=t.second;
        
        q.pop();
        
        if((x+1)<n && cake[x+1][y]==1 && vis[x+1][y]==0 )
        {
            vis[x+1][y]=1;
            q.push({x+1,y});   count++;
        }
        
        if(y+1<n && cake[x][y+1]==1 && vis[x][y+1]==0  )
        {
            vis[x][y+1]=1;
            q.push({x,y+1});   count++;
        }
        
        if( x-1>=0 && cake[x-1][y]==1 && vis[x-1][y]==0  )
        {
            vis[x-1][y]=1;
            q.push({x-1,y});  count++;
        }
        
        if(  y-1>=0&& cake[x][y-1]==1 && vis[x][y-1]==0  )
        {
            vis[x][y-1]=1;
            q.push({x,y-1});  count++;
        }
           
        
    }
            
            if(count>max)
            {
                max=count;
            }
                
            }
            
        }
    }
   
  
 return max;
    
    
    
}


