// Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Prim's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - 
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
Print the MST, as described in the task.
Constraints :
2 <= V, E <= 10^5
1 <= Wi <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 1 3
1 2 1
0 3 5



#include<climits>
#include <iostream>
using namespace std;

 int findMinWeightNotVisted(int *weight, int *visited,int n) {
        int minIndex = 0;
        int minWeight = INT_MAX;
        for(int i=0;i<n;i++) {
            if(visited[i]==0 && minWeight > weight[i]) {
                minWeight = weight[i];
                minIndex = i;
            }
        }
        return minIndex;
    }


void prims(int **mat,int n)
{
  
    int *parent= new int[n];
    
    int *visited = new int[n];
    
    for(int i=0;i<n;i++){
        
        visited[i]=0;
    }
    
    int *weight = new int[n];
    
    parent[0]=-1;
    
    weight[0]=0;
    
    for(int i=1;i<n;i++) {
            weight[i] = INT_MAX;
        }
    
    for(int i=1;i<n;i++) {

            int minVertex = findMinWeightNotVisted(weight,visited,n);
            visited[minVertex] = 1;
            for(int j=0;j<n;j++) {
                if(mat[minVertex][j] !=0  && visited[j]==0) {
                    if( mat[minVertex][j] < weight[j] ) {
                        weight[j] = mat[minVertex][j];
                        parent[j] = minVertex;
                    }
                }
            }
    }
    
    
    for(int i=1;i<n;i++) {
            if( i > parent[i])
                cout<<parent[i]<<" "<<i<<" "<<weight[i]<<endl;
            else
               cout<<i<<" "<<parent[i]<<" "<<weight[i]<<endl;
        }
    
}


int main() {
   
    int n,E;
    
    cin>>n>>E;
    
    
    int** mat = new int*[n];
  for(int i=0; i<n; i++){
    mat[i]=new int[n];
    for(int j=0; j<n; j++){
      mat[i][j]=0;
    }
  }
  
   
    
    for(int i=0;i<E;i++)
    {
        int s,d,w;
        
        cin>>s>>d>>w;
        
        mat[s][d]=w;
        mat[d][s]=w;
        
    }
    
    
    prims(mat,n);
    
}