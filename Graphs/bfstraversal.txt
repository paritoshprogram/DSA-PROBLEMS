//Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Note:
1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains space separated two integers, that denote that there exists an edge between vertex a and b.
Output Format :
Print the BFS Traversal, as described in the task.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2



#include<queue>
#include <iostream>
using namespace std;

int main() {
   
    int n,m;  int s,e;  int t; 
    
    cin>>n>>m;
    
    int ar[n][n];  int visited[n];
    
    for(int k=0;k<n;k++){visited[k]=0;}
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
           ar[i][j]=0;
        }
      
    }
    
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin>>s>>e;
            ar[s][e]=1;
            ar[e][s]=1;
            
        }
        
        
    }
    
    for(int x=0;x<n;x++)
    {
    
    queue<int> q;

   if(visited[x]==0) {q.push(x); } 
        
    visited[x]=1;
    
    while(!q.empty())
    {
        t=q.front();
        
        cout<<t<<" ";
        
        q.pop();
        
        for(int i=0;i<n;i++)
        {
            if(visited[i]==0 && ar[t][i]==1)
            {
                visited[i]=1;
                
                q.push(i);
            }
        }  
       
    }
        
    }      
      
    
}