// Given an undirected graph G(V,E), check if the graph G is connected graph or not.
Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between vertex a and b.
Output Format :
The first and only line of output contains "true" if the given graph is connected or "false", otherwise.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
false 



#include<queue>
#include <iostream>
using namespace std;

int main() {
   int n,m;  int s,e;  int t;  int count=0;
    
    cin>>n>>m;
    
  
    
    int ar[n][n];  int visited[n];
    
    for(int k=0;k<n;k++){visited[k]=0;}
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
           ar[i][j]=0;
        }
      
    }
    
    
    for(int i=0;i<m;i++)
    {
            cin>>s>>e;
            ar[s][e]=1;
            ar[e][s]=1;   
    }
    
    if(n==0)
    {
        cout<<"true";
        
        exit(0);
    }
    
    for(int x=0;x<n;x++)
    {
    
    queue<int> q;

   if(visited[x]==0) {q.push(x);  count+=1; } 
        
    visited[x]=1;
    
    while(!q.empty())
    {
        t=q.front();
        
        q.pop();
        
        for(int i=0;i<n;i++)
        {
            if(visited[i]==0 && ar[t][i]==1)
            {
                visited[i]=1;
                
                q.push(i);
            }
        }  
       
    }
        
    }
    
    
    if(count ==1)
    {
        cout<<"true";
    }
    
    else 
    {
        cout<<"false";
    }
}