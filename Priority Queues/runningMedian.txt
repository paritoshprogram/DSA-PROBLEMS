// You are given a stream of 'N' integers. For every 'i-th' integer added to the running list of integers, print the resulting median.
Print only the integer part of the median



#include<queue>



void findMedian(int *arr, int n) {

    if(n==0 ||n==1)
    {
        if(n==0)
        {
        return;}
        
        if(n==1)
        {
            cout<<arr[0];
            return;
        }
    }
    
    priority_queue<int> max;  priority_queue<int,vector<int>,greater<int>> min; int ans; int t;
    
    max.push(arr[0]);
    
    cout<<arr[0]<<" ";
    
    if(arr[1]<arr[0])
    {
        int s= max.top();
        max.pop();
        max.push(arr[1]);
        min.push(s);
        ans = (arr[1]+arr[0])/2; 
        cout<<ans<<" ";
    }
    
    else
    {
        min.push(arr[1]);
        
        ans= (arr[1]+arr[0])/2; 
        
        cout<<ans<<" ";
        
    }
    
    
    

    for(int i=2;i<n;i++)
    {
        int t=max.top();
        int s1=max.size();
        int s2=min.size();
        
        if(s1==s2)
        {
            if(arr[i]<t)
            {
                max.push(arr[i]);
                
                cout<<max.top()<<" ";
            }
            
            else 
            {
                min.push(arr[i]);
                
                cout<<min.top()<<" ";
            }
               
        }
        
        else
        {
            if(s1>s2)
            {
              if(arr[i]<t)
              {
                  min.push(max.top());
                  max.pop();
                  max.push(arr[i]);
                 
                  
              }
                
                else
                {
                    min.push(arr[i]);
                }
                
                ans=(max.top() + min.top())/2;
                
                cout<<ans<<" ";
            }
            
            else
            {
                if(arr[i]<t)
                {
                max.push(arr[i]);
                }
                
                else{
                    max.push(min.top());
                    min.pop();
                    min.push(arr[i]);
                }
                
                ans=(min.top()+max.top())/2;
                cout<<ans<<" ";
            }
        }
       
        
        
    }
    
    
    
}