// Given a binary tree and data of two nodes, find 'LCA' (Lowest Common Ancestor) of the given two nodes in the binary tree.
LCA
LCA of two nodes A and B is the lowest or deepest node which has both A and B as its descendants. 


HARD SOL 

vector<int>* getPath(BinaryTreeNode<int>* root, int data) {
	if (root == NULL) {
		return NULL;
	}
	
	if (root->data == data) {
		vector<int>* output = new vector<int>();
		output->push_back(root->data);
		return output;
	}
	
	vector<int>* leftOutput = getPath(root->left, data);
	if (leftOutput != NULL) {
		leftOutput->push_back(root->data);
		return leftOutput;
	}

	vector<int>* rightOutput = getPath(root->right, data);
	if (rightOutput != NULL) {
			rightOutput->push_back(root->data);
			return rightOutput;
	} else {
		return NULL;
	}

}

int getLCA(BinaryTreeNode <int>* root , int a, int b) {
   
    if(root==NULL)
    {
        return -1;
    }
    
    vector<int>* va=new vector<int>();   vector<int>* vb=new vector<int>();
    
    va=getPath(root,a);
    
    vb=getPath(root,b);
    
    for(int i=0;i<va->size();i++)
    {
        for(int j=0;j<vb->size();j++)
        {
            if(va->at(i)==vb->at(j))
            {
                int ans=va->at(i);
                return ans;
                
                break;
            }
        }
    }
    
    
    return -1;
    
    
}


// EASY SOL


BinaryTreeNode<int>* helper(BinaryTreeNode<int>* root , int val1 , int val2)
{
    
    
     BinaryTreeNode<int>* leftans;  BinaryTreeNode<int>* rightans;
   if(root==NULL)
   {
       return NULL;
   }
    
    if(root->data==val1||root->data==val2)
    {
        return root;
    }
    
    if(root->data>val1 &&root->data>val2)
    
    {return helper(root->left,val1,val2);}
    
    
    else if(root->data<val1 &&root->data<val2)
    
    {  return helper(root->right,val1,val2);}
    
    
    
    leftans=helper(root->left,val1,val2);
    
    rightans=helper(root->right,val1,val2);
    
    
    
  
    if(leftans && rightans)
    {
        return root;
    }
    
    if(leftans)
    {
        return leftans;
    }
    
    else{
        return rightans;
    }
    
    
    
}

int getLCA(BinaryTreeNode<int>* root , int val1 , int val2){
    
    
    BinaryTreeNode<int>* node;
    node=helper(root,val1,val2);
    
    if(node!=NULL)
    {
        return node->data;
    }
    
    else
    {
        return -1;
    }
 
}






