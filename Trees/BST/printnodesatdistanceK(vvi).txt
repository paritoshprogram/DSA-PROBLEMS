// You are given a Binary Tree of type integer, a target node, and an integer value K.
Print the data of all nodes that have a distance K from the target node. The order in which they would be printed will not matter.


void printkdistanceNodeDown(BinaryTreeNode<int> *root, int k)
{
    // Base Case
    if (root == NULL || k < 0)  return;
 
    // If we reach a k distant node, print it
    if (k==0)
    {
        cout << root->data << endl;
        return;
    }
 
    // Recur for left and right subtrees
    printkdistanceNodeDown(root->left, k-1);
    printkdistanceNodeDown(root->right, k-1);
}



int helper(BinaryTreeNode<int> *root,int node, int k)
{
    
    if(root==NULL)
    {
        return -1;
    }
   
    if(root->data==node)
    {
        printkdistanceNodeDown(root,k);
        
        return 0;
    }
    
    
    int dl=helper(root->left,node,k);
    
    if (dl != -1)
    {
         
         if (dl + 1 == k)
            cout << root->data << endl;
 
         
         else
            printkdistanceNodeDown(root->right, k-dl-2);
 
         
         return 1 + dl;
    }
    
    
    
    int dr =helper(root->right,node,  k);
    if (dr != -1)
    {
         if (dr + 1 == k)
            cout << root->data << endl;
         else
            printkdistanceNodeDown(root->left, k-dr-2);
         return 1 + dr;
    }
 
  
    return -1;
    
    

    
}

void nodesAtDistanceK(BinaryTreeNode<int> *root, int node, int k) {
      
  helper(root,node,k);  
    
    
}