// For a given preorder and inorder traversal of a Binary Tree of type integer stored in an array/list, create the binary tree using the given two arrays/lists. You just need to construct the tree and return the root.


BinaryTreeNode<int>* helper(int *preorder,int prestart,int prelen,int *inorder,int instart,int inlen)
{
    if(instart>inlen)
    {return NULL;}
    
    int rootData = preorder[prestart]; 
int rootIndex = -1; 
for (int i = instart; i <= inlen; i++) { 
if (inorder[i] == rootData) {
rootIndex = i;
break;
}
   
}    
  int lInS = instart;
int lInE = rootIndex - 1;
int lPreS = prestart + 1;
int lPreE = lInE - lInS + lPreS;

int rPreS = lPreE + 1;
int rPreE = prelen;
int rInS = rootIndex + 1;
int rInE = inlen;  
    
 BinaryTreeNode<int>* root = new BinaryTreeNode<int>(rootData);

root->left = helper(preorder, lPreS, lPreE, inorder, lInS, lInE);
    
root->right = helper(preorder, rPreS, rPreE, inorder, rInS, rInE); 
    
return root;    
    
     
}

BinaryTreeNode<int>* buildTree(int *preorder, int preLength, int *inorder, int inLength) {
   
    
   return helper(preorder,0,preLength-1,inorder,0,inLength-1);   
    
    
}