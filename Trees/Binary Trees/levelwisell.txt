// Given a binary tree, write code to create a separate linked list for each level. You need to return the array which contains head of each level linked list.


vector<Node<int>*> constructLinkedListForEachLevel(BinaryTreeNode<int> *root) {
    
   
   
    vector<Node<int>*> v;
     if(root==NULL)
    {
      return v;
    }
    
     queue<BinaryTreeNode<int>* > q; BinaryTreeNode<int>* f; 
    
    Node<int> *head; Node<int> *temp;
    
    head=NULL; temp=NULL;
    
    q.push(root);
    
    while(!q.empty())
    {
        
         
       int s=q.size();
        
        head=NULL; temp=NULL;
        
        for(int i=0;i<s;i++)
        {
            f=q.front();
            q.pop(); 
            
           Node<int> *newnode = new Node<int>(f->data);
            
            if(head==NULL)
            {
                head=newnode;
                temp=newnode;
            }
            
            else {
                
                temp->next=newnode;
                temp=temp->next;
                   
            }
            
            
            if(f->left!=NULL)

            {
                q.push(f->left);
            }
            
            if(f->right!=NULL)

            {
                q.push(f->right);
            }
            
            
           
        }
        
        v.push_back(head);
       
    }
    
    
    return v;
    
      
    
}