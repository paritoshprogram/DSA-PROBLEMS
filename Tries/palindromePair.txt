// Given 'n' number of words, you need to find if there exist any two words which can be joined to make a palindrome or any word, which itself is a palindrome.
The function should return either true or false. You don't have to print anything.
Input Format :
The first line of the test case contains an integer value denoting 'n'.

The following contains 'n' number of words each separated by a single space.
Output Format :
The first and only line of output contains true if the conditions described in the task are met and false otherwise.
Constraints:
0 <= n <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4
abc def ghi cba
Sample Output 1 :
true
Explanation of Sample Input 1:
"abc" and "cba" forms a palindrome



SOL

class TrieNode {
   public:
    char data;
    TrieNode **children;
    bool isTerminal;
    int childCount;

    TrieNode(char data) {
        this->data = data;
        children = new TrieNode *[26];
        for (int i = 0; i < 26; i++) {
            children[i] = NULL;
        }
        isTerminal = false;
        childCount = 0;
    }
};

class Trie {
    TrieNode *root;

   public:
    int count;

    Trie() {
        this->count = 0;
        root = new TrieNode('\0');
    }

    bool add(TrieNode *root, string word) {
        // Base case
        if (word.size() == 0) {
            if (!root->isTerminal) {
                root->isTerminal = true;
                return true;
            } else {
                return false;
            }
        }

        // Small calculation
        int index = word[0] - 'a';
        TrieNode *child;
        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            child = new TrieNode(word[0]);
            root->children[index] = child;
            root->childCount++;
        }

        // Recursive call
        return add(child, word.substr(1));
    }

    void add(string word) {
        if (add(root, word)) {
            this->count++;
        }
    }

    /*..................... Palindrome Pair................... */
    
     bool helper(TrieNode *root, string word)
    {
        
        if(word.size()==0)
        {
            return true;
        }
        
        
        int index = word[0]-'a';
        
        TrieNode *child;
        
        if(root->children[index]!=NULL)
        {
            child=root->children[index];
           
        }
        
        else return false;
        
        if(helper(child,word.substr(1))==true)
           {
               return true;
           }
            
            return false;
    }
    
    
    bool isPalindrome(string str)
{
    // Start from leftmost and rightmost corners of str
    int l = 0;
    int h = str.size()-1;
  
    // Keep comparing characters while they are same
    while (h > l)
    {
        if (str[l++] != str[h--])
        {
            return false;
        }
    }
   return true;
}
    
    
    bool isPalindromePair(vector<string> words) {
        
        int n = words.size();
       
       
         for(int i=0;i<n;i++)
        {
            add(words[i]);
            int k=1;
            while(k<words[i].size())
            {
                add(words[i].substr(k));
                    k++;
            }
        }
        
        
        
        for(int j=0;j<n;j++)
        {
            string sample; string sample1;
            
            sample=words[j];
            
            for(int k=sample.size()-1;k>=0;k--)
            {
                
                sample1=sample1+sample[k];
                
            }
            
            if(helper(root,sample1)==true || isPalindrome(sample)==true)
            {
                return true;
            }
        
            
            
        }
        
        
        return false;
        
        
        
    }
};