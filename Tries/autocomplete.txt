// Given n number of words and an incomplete word w. You need to auto-complete that word w.
That means, find and print all the possible words which can be formed using the incomplete word w.
Note : Order of words does not matter.
Input Format :
The first line of input contains an integer, that denotes the value of n.
The following line contains n space separated words.
The following line contains the word w, that has to be auto-completed.
Output Format :
Print all possible words in separate lines.
Constraints:
Time Limit: 1 sec
Sample Input 1 :
7
do dont no not note notes den
no
Sample Output 2 :
no
not
note
notes


SOL 

class TrieNode {
   public:
    char data;
    TrieNode **children;
    bool isTerminal;

    TrieNode(char data) {
        this->data = data;
        children = new TrieNode *[26];
        for (int i = 0; i < 26; i++) {
            children[i] = NULL;
        }
        isTerminal = false;
    }
};

class Trie {
    TrieNode *root;

   public:
    int count;

    Trie() {
        this->count = 0;
        root = new TrieNode('\0');
    }

    bool insertWord(TrieNode *root, string word) {
        // Base case
        if (word.size() == 0) {
            if (!root->isTerminal) {
                root->isTerminal = true;
                return true;
            } else {
                return false;
            }
        }

        // Small calculation
        int index = word[0] - 'a';
        TrieNode *child;

        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            child = new TrieNode(word[0]);
            root->children[index] = child;
        }

        // Recursive call
        return insertWord(child, word.substr(1));
    }

    void insertWord(string word) {
        if (insertWord(root, word)) {
            this->count++;
        }
    }
    
    
    
       bool helper(TrieNode *root, string word)
    {
        
        if(word.size()==0)
        {
            
            return true;
        }
        
        
        int index = word[0]-'a';
        
        TrieNode *child;
        
        if(root->children[index]!=NULL)
        {
            child=root->children[index];
           
        }
        
        else return false;
        
        if(helper(child,word.substr(1))==true)
           {
               return true;
           }
            
            return false;
    }
    
    void print(TrieNode *root,string output)
    {
        
        
        
        if(root==NULL)
        {
            return;
        }
        
       if(root->isTerminal==true)
        {
           
           cout<<output;
           cout<<endl;
          //return;     
      
    }
        
       
            for(int j=0;j<26;j++)
            {
                if(root->children[j]!=NULL)
                {
                    
                    print(root->children[j],output+root->children[j]->data); 
                  
                }
            }
        
            
     
        
        
        
        
    }
    
    void printwords(TrieNode *root, string word)
    {
        int index;
       
        for(int i=0;i<word.size();i++)
        {
            index=word[i]-'a';
            
            //cout<<word[i];
            
            root=root->children[index];
        }
        
        string output;
        
        output=word;
        
        print(root,output);
       
        
    }
    
    
    void autoComplete(vector<string> input, string pattern) {
     
       int n=input.size();
        
       for(int i=0;i<n;i++)
       {
           insertWord(input[i]);
       }
        
        if(helper(root,pattern)==true)
        {
            
            printwords(root,pattern);
            
            
        }
        
        
        
        
        
        
        
        
    }
};