//Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps:
1.) Subtract 1 from it. (n = n - Â­1) ,
2.) If its divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 ) ,
3.) If its divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 ).  
Write brute-force recursive solution for this.




int minSteps(int n,int *ar)
{
    if (n == 1)
        {
           
            return 0;
        }
        int x, y=INT_MAX ,z=INT_MAX;        //memoization
        
        if(ar[n]!=-1)
        {
          return ar[n];
        }
       
            x = minSteps(n - 1,ar);
          
        
        if (n % 2 == 0)
        {   
         
                y = minSteps(n / 2,ar);
        }
        if (n % 3 == 0)
        {
            
                z = minSteps(n / 3,ar);
                
            
        }
        ar[n]= 1 + min(x, min(y, z));
        return ar[n];
}

int countMinStepsToOne(int n)
{
	int *ar=new int[n+1];  int ans;
   
   for(int k=1;k<=n;k++)
   {
       ar[k]=-1;
   }
   
  ans=minSteps(n,ar) ;
    
    return ans;
}