int helper(int *weights, int *values, int n, int maxWeight,int s,int *ar)
{
    
    if(n==0  || maxWeight==0)
    {
        return 0;
    }
    
    if(ar[s]!=-1)
    {
        return ar[s];
    }
    
    
    if(weights[s]>maxWeight)
    {
        return helper(weights,values,n-1,maxWeight,s+1,ar);
    }
    
    
    int a = helper(weights,values,n-1,maxWeight-weights[s],s+1,ar)+values[s]; 
      
    int b = helper(weights,values,n-1,maxWeight,s+1,ar);
    
    int ans = max(a,b);
    
    ar[s]=ans;
    
    return ans;
    
    
  
    
}


int knapsack(int *weights, int *values, int n, int maxWeight)
{
    
    int *ar = new int[n+1];
    
    for(int i=0;i<n;i++)
    {
        ar[i]=-1;
    }
    
	
   int ans= helper(weights,values,n,maxWeight,0,ar);
    
    return ans;
    
}